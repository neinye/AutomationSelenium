creating an XPath in console (and finding available elements)

$x("//input[contains(@class, 'btn-style')]")
$x("//input[@id='name']")

<a class="navbar-link fedora-navbar-link" href="/sign_in">Login</a>
xpath: //a[@href='/sign_in']

Not every element has an id -> static id, unique name, unique link text. For those elements we need to build xpath to
find and then perform actions on them.
Whatever we use to find an element, id, name, xpath, css -> It should always be unique.
It should only find one matching node unless we want to capture a list of elements.
****************************************************XPATH***************************************************************
Difference between single ‘/’ or double ‘//’
Single slash ‘/’ anywhere in xpath signifies to look for the element immediately inside the parent element.
Double slash ‘//’ signifies to look for any child or nested-child element inside the parent element.
Syntax:
//tag[@attribute='value']

Relative xpath using single ‘/’ for Login link
//div[@id='navbar']/div/div/div/ul/li[2]/a
Relative xpath using double ‘//’ for Login link.
//div[@id='navbar']//ul/li[2]/a
Don’t use “*”, always use the tag name.

Using Text of the element to build xpath

Finding Login link:
//div[@class='homepage-hero']//a[text()='Enroll now']

Using Contains to find the elements:
Syntax: //tag[contains(attribute, ‘value’)]
Finding Login link:
//div[@id='navbar']//a[contains(text(),'Login')]
//div[@id='navbar']//a[contains(@class,'navbar-link') and contains(@href,'sign_in')]

Using Starts-With to find the elements:
Syntax: //tag[starts-with(attribute, ‘value’)]
Finding Login link:
//div[@id='navbar']//a[starts-with(@class,'navbar-link')]

Parent
Syntax: xpath-to-some-element//parent::<tag>

Preceding Sibling
Syntax: xpath-to-some-element//preceding-sibling::<tag>

Following Sibling
Syntax: xpath-to-some-element//following-sibling::<tag>

************************************************CSS SELECTORS***********************************************************

Syntax:

tag[attribute='value']
“#” -> Id
“.” -> Class

Element Displayed Example Text Box:

input[id=displayed-text]
#displayed-text
input#displayed-text
input[class=displayed-class]
.displayed-class
input.displayed-class

AppenDing Classes
.class1.class2.class3 -> Until we find a unique element

Using wildcards in CSS Selectors:
“^” -> Represents the starting text
“$” -> Represents the ending text
“*” -> Represents the text contained

Syntax:
tag[attribute<special character>=’value’]

Examples:

input[class='inputs'] -> Only 1 matching node
input[class^='inputs'] -> Two matching nodes
input[class='displayed-class'] - No matching nodes
input[class$='class'] -> One matching node
input[class*='displayed-class'] -> One matching node

Finding Children

fieldset -> 10 matching nodes
Fieldset>table
fieldset>#product -> One matching node
fieldset>button -> One matching node
Fieldset>a
fieldset>input#name